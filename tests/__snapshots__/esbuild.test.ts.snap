// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`augmentations > expect no augmentations 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by 'actions-kit'

import type * as core from "@actions/core";



declare module "@actions/core" {


}
"
`;

exports[`augmentations > expect no augmentations 2`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
async function run() {
  core.info("hello world!");
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
"
`;

exports[`augmentations > expect only inputs to be augmented 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by 'actions-kit'

import type * as core from "@actions/core";



declare module "@actions/core" {

  type ActionInputName = "type" | "who-to-greet";

  export function getInput(name: ActionInputName, options?: core.InputOptions): string;


}
"
`;

exports[`augmentations > expect only inputs to be augmented 2`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
async function run() {
  const type = core.getInput("type");
  const whoToGreet = core.getInput("who-to-greet");
  const message = \`Hello \${whoToGreet}!\`;
  core.info(message);
  if (type === "error") {
    core.setFailed("This is an error!");
  }
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
"
`;

exports[`augmentations > expect only outputs to be augmented 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by 'actions-kit'

import type * as core from "@actions/core";



declare module "@actions/core" {

  type ActionOutputName = "message";

  export function setOutput(name: ActionOutputName, value: any): void;


}
"
`;

exports[`augmentations > expect only outputs to be augmented 2`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
async function run() {
  core.setOutput("message", "Hello, World!");
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
"
`;

exports[`custom output path 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by 'actions-kit'

import type * as core from "@actions/core";



declare module "@actions/core" {

  type ActionInputName = "type" | "who-to-greet";

  export function getInput(name: ActionInputName, options?: core.InputOptions): string;

  type ActionOutputName = "message";

  export function setOutput(name: ActionOutputName, value: any): void;


}
"
`;

exports[`custom output path 2`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
async function run() {
  const type = core.getInput("type");
  const whoToGreet = core.getInput("who-to-greet");
  const message = \`Hello \${whoToGreet}!\`;
  core.info(message);
  if (type === "error") {
    core.setFailed("This is an error!");
  }
  core.setOutput("message", message);
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
"
`;

exports[`expect \`actions-kit.d.ts\` to be generated 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by 'actions-kit'

import type * as core from "@actions/core";



declare module "@actions/core" {

  type ActionInputName = "type" | "who-to-greet";

  export function getInput(name: ActionInputName, options?: core.InputOptions): string;

  type ActionOutputName = "message";

  export function setOutput(name: ActionOutputName, value: any): void;


}
"
`;

exports[`expect \`actions-kit.d.ts\` to be generated 2`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
async function run() {
  const type = core.getInput("type");
  const whoToGreet = core.getInput("who-to-greet");
  const message = \`Hello \${whoToGreet}!\`;
  core.info(message);
  if (type === "error") {
    core.setFailed("This is an error!");
  }
  core.setOutput("message", message);
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
"
`;

exports[`expect no \`actions-kit.d.ts\` file generated if plugin not in use 1`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
async function run() {
  const type = core.getInput("type");
  const whoToGreet = core.getInput("who-to-greet");
  const message = \`Hello \${whoToGreet}!\`;
  core.info(message);
  if (type === "error") {
    core.setFailed("This is an error!");
  }
  core.setOutput("message", message);
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
"
`;

exports[`inject > expect \`ACTION_INPUTS\` & \`ACTION_OUTPUTS\` in global scope 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by 'actions-kit'

import type * as core from "@actions/core";

declare global {
  export const ACTION_INPUTS = {
    "type": "type",
    "who-to-greet": "who-to-greet",
  };

  export const ACTION_OUTPUTS = {
    "message": "message",
  };

}

declare module "@actions/core" {

  type ActionInputName = "type" | "who-to-greet";

  export function getInput(name: ActionInputName, options?: core.InputOptions): string;

  type ActionOutputName = "message";

  export function setOutput(name: ActionOutputName, value: any): void;


}
"
`;

exports[`inject > expect \`ACTION_INPUTS\` & \`ACTION_OUTPUTS\` in global scope 2`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
globalThis.ACTION_INPUTS = { "type": "type", "who-to-greet": "who-to-greet" };
globalThis.ACTION_OUTPUTS = { "message": "message" };
;
async function run() {
  const type = core.getInput("type");
  const whoToGreet = core.getInput("who-to-greet");
  const message = \`Hello \${whoToGreet}!\`;
  core.info(message);
  if (type === "error") {
    core.setFailed("This is an error!");
  }
  core.setOutput("message", message);
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
;
"
`;

exports[`inject > expect \`ACTION_INPUTS\` in global scope 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by 'actions-kit'

import type * as core from "@actions/core";

declare global {
  export const ACTION_INPUTS = {
    "type": "type",
    "who-to-greet": "who-to-greet",
  };

}

declare module "@actions/core" {

  type ActionInputName = "type" | "who-to-greet";

  export function getInput(name: ActionInputName, options?: core.InputOptions): string;


}
"
`;

exports[`inject > expect \`ACTION_INPUTS\` in global scope 2`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
globalThis.ACTION_INPUTS = { "type": "type", "who-to-greet": "who-to-greet" };
;
async function run() {
  const type = core.getInput("type");
  const whoToGreet = core.getInput("who-to-greet");
  const message = \`Hello \${whoToGreet}!\`;
  core.info(message);
  if (type === "error") {
    core.setFailed("This is an error!");
  }
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
;
"
`;

exports[`inject > expect \`ACTION_OUTPUTS\` in global scope 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by 'actions-kit'

import type * as core from "@actions/core";

declare global {
  export const ACTION_OUTPUTS = {
    "message": "message",
  };

}

declare module "@actions/core" {

  type ActionOutputName = "message";

  export function setOutput(name: ActionOutputName, value: any): void;


}
"
`;

exports[`inject > expect \`ACTION_OUTPUTS\` in global scope 2`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
globalThis.ACTION_OUTPUTS = { "message": "message" };
;
async function run() {
  core.setOutput("message", "Hello, World!");
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
;
"
`;

exports[`inject > expect no change in global scope 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by 'actions-kit'

import type * as core from "@actions/core";



declare module "@actions/core" {

  type ActionInputName = "type" | "who-to-greet";

  export function getInput(name: ActionInputName, options?: core.InputOptions): string;

  type ActionOutputName = "message";

  export function setOutput(name: ActionOutputName, value: any): void;


}
"
`;

exports[`inject > expect no change in global scope 2`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
async function run() {
  const type = core.getInput("type");
  const whoToGreet = core.getInput("who-to-greet");
  const message = \`Hello \${whoToGreet}!\`;
  core.info(message);
  if (type === "error") {
    core.setFailed("This is an error!");
  }
  core.setOutput("message", message);
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
"
`;
